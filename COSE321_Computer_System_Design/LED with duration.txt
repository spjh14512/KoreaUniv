/////////////// ARM Assembly ////////////////

#define csd_LED_ADDR 0x41200000

.extern csd_main

.global main

main:

	ldr r9, =csd_LED_ADDR	// load LED output base address
	mov r10, #1				// initialize r10 with 1

loop:
	strb r10, [r9]			// turn on current led
	cmp r10, #0x80			// if (r10 == 0b1000_0000)
	moveq r10, #1			// then : r10 := 0b0000_0001 (LD0)
	lslne r10, #1			// else : shift left r10 by 1 bit (next LED)
	bl csd_main				// call C function (wait for some duration)
	b loop					// back to start of loop



end:
	nop
	b end



///////////////// END ///////////////////


///////////////// C Code /////////////////

#include <stdio.h>

#define csd_SWC_ADDR 0x41210000

int csd_main()
{
	int* ptr = csd_SWC_ADDR;
	int switches = *ptr;
	int duration = 8500000;
	if (switches & (1 << 7)) {duration *= 1;}
	else if (switches & (1 << 6)) {duration *= 2;}
	else if (switches & (1 << 5)) {duration *= 3;}
	else if (switches & (1 << 4)) {duration *= 4;}
	else if (switches & (1 << 3)) {duration *= 5;}
	else if (switches & (1 << 2)) {duration *= 6;}
	else if (switches & (1 << 1)) {duration *= 7;}
	else if (switches & 1) {duration *= 8;}
	else {duration *= 10;}

	for (int i = 0; i < duration; i++) {}
	return 0;
}


///////////////////  END  ////////////////////
